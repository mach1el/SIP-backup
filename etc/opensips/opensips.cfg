####### Global Parameters #########

log_level=2
log_stderror=no
log_facility=LOG_LOCAL0
children=4
auto_aliases=no
alias=192.168.1.116
listen=udp:192.168.1.116:5060
listen=ws:192.168.1.116:8888


####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 60)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)
modparam("mi_fifo", "trace_destination", "mi_dest")
modparam("mi_fifo", "trace_bwlist", "w: ps, which")

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-no-db")

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")

#### HTTPD module
loadmodule "httpd.so" 
modparam("httpd", "port", 8080)
loadmodule "mi_json.so"
modparam("mi_json", "mi_json_root", "json")
loadmodule "mi_http.so"
modparam("mi_http", "mi_http_method", 1)

#### core module
loadmodule "auth.so"
loadmodule "db_mysql.so"
loadmodule "proto_udp.so"
loadmodule "json.so"
loadmodule "proto_ws.so"

#### SIPTrace
loadmodule "siptrace.so"
modparam("siptrace", "trace_on", 1)
modparam("siptrace", "trace_id","[tid]uri=mysql://opensips:opensips@localhost/opensips;table=sip_trace;")

#### ACCounting module
loadmodule "acc.so"
modparam("acc", "early_media", 1)
modparam("acc", "report_cancels", 1)
modparam("acc", "detect_direction", 0)
modparam("acc", "log_level", 2)
modparam("acc", "db_url","mysql://opensips:opensips@localhost/opensips")
modparam("acc", "db_table_acc", "acc")
modparam("acc", "db_table_missed_calls", "missed_calls")
modparam("acc", "extra_fields", "db: src_ip; dst_ip")
modparam("acc", "extra_fields", "db: caller; callee")
modparam("acc", "extra_fields", "db: max; loading; prefix")

#### Dialog module
loadmodule "dialog.so"
modparam("dialog", "db_url","mysql://opensips:opensips@localhost/opensips")
modparam("dialog", "table_name", "dialog")
modparam("dialog", "enable_stats", 1)
modparam("dialog", "profiles_with_value","caller")
modparam("dialog", "dlg_match_mode", 2)
modparam("dialog", "default_timeout", 21600)
modparam("dialog", "db_mode", 1)

#### Load Balancer
loadmodule "load_balancer.so"
modparam("load_balancer", "db_url", "mysql://opensips:opensips@localhost/opensips")
modparam("load_balancer", "db_table", "load_balancer")
modparam("load_balancer", "probing_reply_codes", "404")

#### RTPengine protocol
loadmodule "rtpengine.so"
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:2223")

#### Nathelper protocol
loadmodule "nathelper.so"
modparam("registrar|nathelper", "received_avp", "$avp(rcv)")

#### Rest Client
loadmodule "rest_client.so"
modparam("rest_client", "curl_timeout", 10)
modparam("rest_client", "connection_timeout", 5)
modparam("rest_client", "max_async_transfers", 300)
modparam("rest_client", "ssl_verifypeer", 0)
modparam("rest_client", "ssl_verifyhost", 0)

####### Routing Logic ########

# main request routing logic
route{
	# script_trace( 1, "$rm/$si/f=$fu/r=$ru/$ci/$si", "me");

	xlog("L_INFO", "-------------------- $ci|start|recieved $oP request $rm $ou\n");
	xlog("L_INFO", "-------------------- $ci|log|source $si:$sp\n");
	xlog("L_INFO", "-------------------- $ci|log|from $fu\n");
	xlog("L_INFO", "-------------------- $ci|log|to $tu\n");

	if (!mf_process_maxfwd_header("10")) {
		xlog("L_WARN", "-------------------- $ci|end|to many hops");
		send_reply("483","Too Many Hops");
		exit;
	}

	if (lookup("location","m")) {
		xlog("-------------------- [INCOMINGCALL][$rU @ $si:$sp ] Forward call call to <$ru> via <$du>\n");
		if (!t_relay()) {
			send_reply("503","Internal Error");
		};
		exit;
	}

	if (has_totag()) {
		if (loose_route()) {
			
			if (is_method("BYE")) {
				do_accounting("log","failed");
			} else if (is_method("INVITE")) {
				record_route();
			}
			route(relay);
		} else {
			
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					t_relay();
					exit;
				} else {
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}


	# CANCEL processing
	if (is_method("CANCEL")) {
		xlog("-------------------- CANCEL CALL,$ru,$ci,$fn,$fu\n");
		if (t_check_trans()) {
			xlog("L_INFO", "-------------------- $ru|log|request belogs to a known transaction\n");
			t_relay();
			xlog("L_INFO", "-------------------- $ru|pass|$rd:$rp");
		} else {
			xlog("L_NOTICE", "-------------------- $ru|end|no matching transaction\n");
		}
		exit;
	}

	t_check_trans();

	if ( !(is_method("REGISTER")  ) ) {
		if (is_myself("$fd")) {
					
		} else {
			
			if (!is_myself("$rd")) {
				send_reply("403","Relay Forbidden");
				exit;
			}
		}

	}

	if (loose_route()) {
		xlog("L_ERR","-------------------- Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]\n");

		if (!is_method("ACK")) {
			xlog("L_WARN", "-------------------- $ru|end|initial request contained a preloaded route set\n");
			send_reply("403","Preload Route denied");
			exit;
		}
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();


	# account only INVITEs
	if (is_method("INVITE")) {
        sip_trace("tid", "m", "sip|rest", "$fu");
		$acc_extra(src_ip) = $si;
        $acc_extra(caller) = $fu;
        $acc_extra(callee) = $ru;
		create_dialog("B");
		do_accounting("db|db", "cdr|missed");

		xlog("-------------------- CALL,$ru,$ci,$fn,$fu\n");

		if ( ($fn != null) && ($si != $rd)) {
			route(ib);
        } else if (($fn == null) && ($si == $rd)) {
            route(ib);
        } else {
			route(ob);
		}
        exit;
	}
	
	if (!is_myself("$rd")) {
		append_hf("P-hint: outbound\r\n");
		route(relay);
	}

	# requests for my domain
	if (is_method("PUBLISH|SUBSCRIBE")) {
		send_reply("503", "Service Unavailable");
		exit;
	}

	if (is_method("REGISTER")) {
		if (!save("location"))
			sl_reply_error();
		exit;
	}

	if ($rU==NULL) {
		send_reply("484","Address Incomplete");
		exit;
	}

	# do lookup with method filtering
	if (!lookup("location","m")) {
		t_reply("404", "Not Found");
		exit;
	}

	if (t_check_status("480")) {
		xlog("L_WARN","-------------------- Call over limits\n");
		t_relay();
	}

    exit;
}

route[ib] {
	if ( !load_balance("2","asterisk") ) {
		send_reply("500","Service full");
		exit;
	}

	xlog("-------------------- Selected destination is: $dd\n");
    $acc_extra(dst_ip) = $dd;
	    
	t_on_failure("GW_FAILOVER");
	route(relay);
    exit;
}

route[ob] {
	if ( $rU=~"^1[0-9]{3}" ) {
		$avp(lb_res) = "vtt";
	} else if ( $rU=~"^90332160345" ) {
		$avp(lb_res) = "vt";
	}
	else {
		send_reply("403","Destination not found");
		exit;
	}
    
    if ( !load_balance("1","$avp(lb_res)") ) {
        xlog("-------------------- REPORT: LB failed with code $T_reply_code .Service is full\n");
        send_reply("500","Service full");
        $json(db_data) := "{'from_tag' : '',
                            'callid' : '',
                            'sip_code' : '500',
                            'sip_reason' : 'Service full',
                            'src_ip' : '',
                            'caller' : '',
                            'callee' : ''
                            }";
        $json(db_data/from_tag) = $ft;
        $json(db_data/callid) = $ci;
        $json(db_data/src_ip) = $si;
        $json(db_data/caller) = $fu;
        $json(db_data/callee) = $ru;
        $var(rc) = rest_post("http://localhost:5000/insert_db",
                            "$json(db_data)","application/json" , "$var(body)", "$var(ct)", "$var(rcode)");
        exit;
    }

	xlog("-------------------- Selected destination is: $dd\n");
	$avp(des) = $dd;
    $acc_extra(dst_ip) = $dd;
    $var(rc) = rest_get("http://localhost:5000/lb/data/gateways?gw=$dd&prefix=$avp(lb_res)",
                        "$var(data)",
                        "$var(ct)",
                        "$var(rcode)"
                        );
    $acc_extra(prefix) = $avp(lb_res);
    $json(data) := $var(data);
    $acc_extra(max) = $json(data[0]/max);
    $acc_extra(loading) = $json(data[0]/load);

	t_on_failure("GW_FAILOVER");
    route(relay);
}

route[relay] {
	if (is_method("INVITE")) {
		t_on_branch("handle_nat");
		t_on_reply("handle_nat");
        t_on_failure("missed_call");
        rtpengine_manage("record-call");

	} else if (is_method("BYE|CANCEL")) {
		rtpengine_delete();
	}

	if (!t_relay()) {
		send_reply("500","Internal Error");
	};
	exit;
}


branch_route[per_branch_ops] {
	xlog("-------------------- new branch at $ru\n");
}

branch_route[handle_nat] {

	if (!is_method("INVITE") || !has_body("application/sdp"))
		return;

	if (isflagset(SRC_WS) && isbflagset(DST_WS))
		$var(rtpengine_flags) = "ICE=force-relay DTLS=passive";
	else if (isflagset(SRC_WS) && !isbflagset(DST_WS))
		$var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";
	else if (!isflagset(SRC_WS) && isbflagset(DST_WS))
		$var(rtpengine_flags) = "UDP/TLS/RTP/SAVPF ICE=force";
	else if (!isflagset(SRC_WS) && !isbflagset(DST_WS))
		$var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";

	rtpengine_offer("$var(rtpengine_flags)");
}

onreply_route[handle_nat] {

	fix_nated_contact();
	if (!has_body("application/sdp"))
		return;

	if (isflagset(SRC_WS) && isbflagset(DST_WS))
		$var(rtpengine_flags) = "ICE=force-relay DTLS=passive";
	else if (isflagset(SRC_WS) && !isbflagset(DST_WS))
		$var(rtpengine_flags) = "UDP/TLS/RTP/SAVPF ICE=force";
	else if (!isflagset(SRC_WS) && isbflagset(DST_WS))
		$var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";
	else if (!isflagset(SRC_WS) && !isbflagset(DST_WS))
		$var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";

	rtpengine_answer("$var(rtpengine_flags)");	
}


failure_route[missed_call] {
    if (t_was_cancelled()) {
		exit;
	}
}

failure_route[GW_FAILOVER] {
    do_accounting("log","failed");
	if (t_was_cancelled()) {
		exit;
	}

	if ( t_check_status("[56][0-9][0-9]") || (t_check_status("408") && t_local_replied("all") ) ) {
        xlog("-------------------- REPORT: LB destination $avp(des) failed with code $T_reply_code\n");
		t_reply("500","Error");
	}
}
