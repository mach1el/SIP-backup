####### Global Parameters #########
log_level=2
log_stderror=yes
log_facility=LOG_LOCAL0
children=4
auto_aliases=no
listen=udp:localhost:5060
listen=ws:localhost:8080
db_default_url="postgres://postgres:postgres@localhost/postgres"

####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 60)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)
modparam("mi_fifo", "trace_destination", "mi_dest")
modparam("mi_fifo", "trace_bwlist", "w: ps, which")

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-no-db")

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")

#### HTTPD module
loadmodule "httpd.so"
modparam("httpd", "port", 8888)
loadmodule "mi_json.so"
modparam("mi_json", "mi_json_root", "json")
loadmodule "mi_http.so"
modparam("mi_http", "mi_http_method", 1)

#### core module
loadmodule "auth.so"
loadmodule "db_mysql.so"
loadmodule "db_postgres.so"
loadmodule "json.so"
loadmodule "proto_udp.so"
loadmodule "proto_ws.so"

#### ACCounting module

#### RTPengine protocol
loadmodule "rtpengine.so"
modparam("rtpengine", "rtpengine_sock", "udp:localhost:2229")

#### Nathelper protocol
loadmodule "nathelper.so"
modparam("registrar|nathelper", "received_avp", "$avp(rcv)")

#### Dialog module
loadmodule "dialog.so"
modparam("dialog", "table_name", "opensips_dialog")
modparam("dialog", "enable_stats", 1)
modparam("dialog", "profiles_with_value","caller")
modparam("dialog", "dlg_match_mode", 2)
modparam("dialog", "default_timeout", 21600)
modparam("dialog", "db_mode", 1)

#### ACCounting module
loadmodule "acc.so"
modparam("acc", "early_media", 1)
modparam("acc", "report_cancels", 1)
modparam("acc", "detect_direction", 0)
modparam("acc", "log_level", 2)
modparam("acc", "db_table_acc", "opensips_acc")
modparam("acc", "db_table_missed_calls", "opensips_acc")
modparam("acc", "extra_fields", "db: src_ip; dst_ip")
modparam("acc", "extra_fields", "db: caller; callee")

#### Drouting
loadmodule "drouting.so"
#modparam("drouting", "db_url")
modparam("drouting", "ruri_avp", "$avp(dr_ruri)")
modparam("drouting", "drd_table", "opensips_dr_gateways")
modparam("drouting", "drr_table", "opensips_dr_rules")
modparam("drouting", "drg_table", "opensips_dr_groups")
modparam("drouting", "drc_table", "opensips_dr_carriers")
modparam("drouting", "probing_interval", 50)
modparam("drouting", "probing_reply_codes", "501, 403")

####### Routing Logic ########

# main request routing logic
route{
	xlog("L_INFO", "-------------------- $ci|start|recieved $oP request $rm $ou\n");
	xlog("L_INFO", "-------------------- $ci|log|source $si:$sp\n");
	xlog("L_INFO", "-------------------- $ci|log|from $fu\n");
	xlog("L_INFO", "-------------------- $ci|log|to $tu\n");

	if (!mf_process_maxfwd_header("10")) {
		xlog("L_WARN", "-------------------- $ci|end|to many hops");
		send_reply("483","Too Many Hops");
		exit;
	}

	if (lookup("location","m")) {
		xlog("-------------------- [INCOMINGCALL][$rU @ $si:$sp ] Forward call call to <$ru> via <$du>\n");
		if (!t_relay()) {
			send_reply("503","Internal Error");
		};
		exit;
	}

	if (has_totag()) {
		if (loose_route()) {

			if (is_method("BYE")) {
			} else if (is_method("INVITE")) {
				record_route();
			}
			route(relay);
		} else {

			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					t_relay();
					exit;
				} else {
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}


	# CANCEL processing
	if (is_method("CANCEL")) {
		xlog("-------------------- CANCEL CALL,$ru,$ci,$fn,$fu\n");
		if (t_check_trans()) {
			xlog("L_INFO", "-------------------- $ru|log|request belogs to a known transaction\n");
			t_relay();
			xlog("L_INFO", "-------------------- $ru|pass|$rd:$rp");
		} else {
			xlog("L_NOTICE", "-------------------- $ru|end|no matching transaction\n");
		}
		exit;
	}

	t_check_trans();

	if ( !(is_method("REGISTER")  ) ) {
		if (is_myself("$fd")) {

		} else {

			if (!is_myself("$rd")) {
				send_reply("403","Relay Forbidden");
				exit;
			}
		}

	}

	if (loose_route()) {
		xlog("L_ERR","-------------------- Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]\n");

		if (!is_method("ACK")) {
			xlog("L_WARN", "-------------------- $ru|end|initial request contained a preloaded route set\n");
			send_reply("403","Preload Route denied");
			exit;
		}
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	# account only INVITEs
	if (is_method("INVITE")) {
		$acc_extra(src_ip) = $si;
		$acc_extra(caller) = $fu;
		$acc_extra(callee) = $ru;
		create_dialog("B");
		do_accounting("db|log|log", "cdr|missed|failed");
		xlog("-------------------- CALL,$ru,$ci,$fn,$fu\n");

		#route(FORWARD_CALLS);
		route(DROUTING);
		exit;
	}

	if (!is_myself("$rd")) {
		append_hf("P-hint: outbound\r\n");
		route(relay);
	}

	# requests for my domain
	if (is_method("PUBLISH|SUBSCRIBE")) {
		send_reply("503", "Service Unavailable");
		exit;
	}

	if (is_method("REGISTER")) {
		if (!save("location"))
			sl_reply_error();
		exit;
	}

	if ($rU==NULL) {
		send_reply("484","Address Incomplete");
		exit;
	}

	# do lookup with method filtering
	if (!lookup("location","m")) {
		t_reply("404", "Not Found");
		exit;
	}

	if (t_check_status("480")) {
		xlog("L_WARN","-------------------- Call over limits\n");
		t_relay();
	}

	exit;
}

route[DROUTING] {
	if(!do_routing("0")) {
		xlog("----- ERROR: no routes available for this <$ru>\n");
		sl_send_reply("503", "No routes available");
		exit;
	}

	xlog("----- Routing: Going to <$ru> via <$fu>,gateway: <$rd>\n");

	$acc_extra(prefix) = "";
	$acc_extra(max) = 0;
	$acc_extra(loading) = 0;
	$acc_extra(dst_ip) = $rd;

	t_on_failure("GW_FAILOVER");
	route(relay);
	exit;
}

route[relay] {
	if (is_method("INVITE")) {
		t_on_branch("handle_nat");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
		rtpengine_manage("record-call");

	} else if (is_method("BYE|CANCEL")) {
		rtpengine_delete();
	}

	if (!t_relay()) {
		send_reply("500","Internal Error");
	};
	exit;
}


branch_route[per_branch_ops] {
	xlog("-------------------- new branch at $ru\n");
}

branch_route[handle_nat] {

	if (!is_method("INVITE") || !has_body("application/sdp"))
		return;

	if (isflagset(SRC_WS) && isbflagset(DST_WS))
		$var(rtpengine_flags) = "ICE=force-relay DTLS=passive";
	else if (isflagset(SRC_WS) && !isbflagset(DST_WS))
		$var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";
	else if (!isflagset(SRC_WS) && isbflagset(DST_WS))
		$var(rtpengine_flags) = "UDP/TLS/RTP/SAVPF ICE=force";
	else if (!isflagset(SRC_WS) && !isbflagset(DST_WS))
		$var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";

	rtpengine_offer("$var(rtpengine_flags)");
}

onreply_route[handle_nat] {

	fix_nated_contact();
	if (!has_body("application/sdp"))
		return;

	if (isflagset(SRC_WS) && isbflagset(DST_WS))
		$var(rtpengine_flags) = "ICE=force-relay DTLS=passive";
	else if (isflagset(SRC_WS) && !isbflagset(DST_WS))
		$var(rtpengine_flags) = "UDP/TLS/RTP/SAVPF ICE=force";
	else if (!isflagset(SRC_WS) && isbflagset(DST_WS))
		$var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";
	else if (!isflagset(SRC_WS) && !isbflagset(DST_WS))
		$var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";

	rtpengine_answer("$var(rtpengine_flags)");
}


failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}
}

failure_route[GW_FAILOVER] {
	if (t_was_cancelled()) {
		exit;
	}

	if ( t_check_status("[56][0-9][0-9]") || (t_check_status("408") && t_local_replied("all") ) ) {
		xlog("-------------------- REPORT: LB destination $avp(des) failed with code $T_reply_code\n");
		t_reply("500","Error");
	}
}
